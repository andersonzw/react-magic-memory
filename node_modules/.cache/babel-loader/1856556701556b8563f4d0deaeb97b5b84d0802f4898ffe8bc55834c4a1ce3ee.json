{"ast":null,"code":"var _jsxFileName = \"/home/vboxuser/repos/magic-memory/src/App.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport SingleCard from \"./components/SingleCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardImages = [{\n  src: \"/img/helmet-1.png\"\n}, {\n  src: \"/img/potion-1.png\"\n}, {\n  src: \"/img/ring-1.png\"\n}, {\n  src: \"/img/scroll-1.png\"\n}, {\n  src: \"/img/shield-1.png\"\n}, {\n  src: \"/img/sword-1.png\"\n}];\nfunction App() {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n\n  // need states to store user choices\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n\n  // called in a new game\n  // shuffle cards\n  const shuffleCards = () => {\n    const shuffledDeck = [...cardImages, ...cardImages]\n    // suffle cards\n    .sort(() => Math.random() - 0.5)\n    // creates a new object where each card also has an id\n    .map(card => ({\n      ...card,\n      id: Math.random()\n    }));\n\n    // update the state\n    setCards(shuffledDeck);\n    setTurns(0);\n  };\n\n  // handle choice\n  const handleChoice = card => {\n    if (choiceOne === null) {\n      setChoiceOne(card);\n    } else {\n      setChoiceTwo(card);\n      compareCards(card);\n    }\n    console.log(choiceOne, choiceTwo);\n  };\n\n  // compare cards\n\n  const compareCards = secondCard => {\n    choiceOne.src === secondCard.src ? console.log(\"match\") : console.log(\"nomatch\");\n    resetTurn();\n  };\n  const resetTurn = () => {\n    setChoiceTwo(null);\n    setChoiceOne(null);\n    setTurns(prevTurns => prevTurns + 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Magic Match\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: shuffleCards,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: Turn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-grid\",\n      children: cards.map(card =>\n      /*#__PURE__*/\n      // pass down a prop\n      _jsxDEV(SingleCard, {\n        card: card,\n        handleChoice: handleChoice\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"DO2pSOM9quZWZQnC2EWzdU2DmF4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","SingleCard","jsxDEV","_jsxDEV","cardImages","src","App","_s","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","shuffleCards","shuffledDeck","sort","Math","random","map","card","id","handleChoice","compareCards","console","log","secondCard","resetTurn","prevTurns","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","Turn","_c","$RefreshReg$"],"sources":["/home/vboxuser/repos/magic-memory/src/App.jsx"],"sourcesContent":["import { useState } from \"react\";\nimport \"./App.css\";\nimport SingleCard from \"./components/SingleCard\";\n\nconst cardImages = [\n  { src: \"/img/helmet-1.png\" },\n  { src: \"/img/potion-1.png\" },\n  { src: \"/img/ring-1.png\" },\n  { src: \"/img/scroll-1.png\" },\n  { src: \"/img/shield-1.png\" },\n  { src: \"/img/sword-1.png\" },\n];\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n\n  // need states to store user choices\n  const [choiceOne, setChoiceOne] = useState(null)\n  const [choiceTwo, setChoiceTwo] = useState(null)\n\n  // called in a new game\n  // shuffle cards\n  const shuffleCards = () => {\n    const shuffledDeck = [...cardImages, ...cardImages]\n      // suffle cards\n      .sort(() => Math.random() - 0.5)\n      // creates a new object where each card also has an id\n      .map((card) => ({ ...card, id: Math.random() }));\n\n    // update the state\n    setCards(shuffledDeck);\n    setTurns(0);\n  };\n\n\n  // handle choice\n    const handleChoice = (card) =>{\n      if (choiceOne === null){\n        setChoiceOne(card)\n      }\n\n      else {\n        setChoiceTwo(card)\n        compareCards(card);\n   \n      }\n\n      console.log(choiceOne, choiceTwo,);\n    }\n\n    // compare cards\n\n    const compareCards = (secondCard) => {\n       choiceOne.src === secondCard.src ? console.log(\"match\") : console.log(\"nomatch\");\n       resetTurn()\n\n    }\n\n\n    const resetTurn = () => {\n      setChoiceTwo(null)\n      setChoiceOne(null)\n      setTurns(prevTurns => prevTurns + 1)\n    }\n\n\n\n\n\n  return (\n    <div className=\"App\">\n      <h1>Magic Match</h1>\n      <button onClick={shuffleCards}>New Game</button>\n      <p>{Turn}</p>\n\n      <div className=\"card-grid\">\n        {cards.map((card) => (\n          // pass down a prop\n          <SingleCard key={card.id} card={card} handleChoice={handleChoice}/>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}